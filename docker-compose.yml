version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: attendance_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: attendance_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - attendance_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d attendance_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Python Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: attendance_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://admin:password@postgres:5432/attendance_db
      SECRET_KEY: your-secret-key-here-change-in-production
      PYTHONUNBUFFERED: 1
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    networks:
      - attendance_network
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev  # Use Dockerfile.dev for development
    container_name: attendance_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000/api/v1
      NODE_ENV: development
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - attendance_network
    command: npm run dev

networks:
  attendance_network:
    driver: bridge

volumes:
  postgres_data:
  backend_uploads: